using Azure;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using System.Reflection.Metadata.Ecma335;
using User_UserApi.Models;

using User_UserApi.Repository.IRepository;
using User_UserApi.ViewModel;



namespace User_UserApi.Controllers
{
    [Route("api/UserApi")]
    [ApiController]
    public class UserApiController : ControllerBase
    {

       
        public readonly IUnitOfWork _unitOfWork;
    
        public UserApiController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
          

        }
        [HttpGet]
        public IActionResult TheatreList()
        {
            var users = _unitOfWork.TheatreRepository.GetAll().ToList();

            var data = users.Select(u=> new TheatreViewModel
            {
                TheatreId = u.TheatreId,
                TheatreName = u.TheatreName,
                Address = u.Address,    
            });
            
            return Ok(data);
        }

        [HttpGet("CountryList")]
        public IActionResult CountryList()
        {
            var data = _unitOfWork.CountryRepository.GetAll().ToList();
            return Ok(data);

        }
        [HttpGet("StateList")]
        public IActionResult StateList(int countryId)
        {
            var data = _unitOfWork.StateRepository.GetAll().Where(u => u.CountryId == countryId);
            return Ok(data); // Return states as JSON

        }
        [HttpGet("CityList")]
        public IActionResult CityList(int stateId)
        {
            var data = _unitOfWork.CityRepository.GetAll().Where(u => u.StateId == stateId);
            return Ok(data); // Return states as JSON

        }


        [HttpGet("{id:int}", Name = "GetTheatre")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public IActionResult GetTheatre(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            var theatre = _unitOfWork.TheatreRepository.Get(u => u.TheatreId == id);
            if (theatre == null)
            {
                return NotFound();
            }
            return Ok(theatre);
        }

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult Add([FromBody] TheatreViewModel theatreViewModel)
        {
            if (theatreViewModel == null)
            {
                return BadRequest("Invalid request data");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (theatreViewModel.TheatreId > 0)
            {
                return StatusCode(StatusCodes.Status400BadRequest, "TheatreId should not be provided, it will be generated by the system.");
            }

            var obj = new Theatre
            {
                TheatreName = theatreViewModel.TheatreName,
                Address = theatreViewModel.Address
            };

            try
            {
                _unitOfWork.TheatreRepository.Add(obj);
                _unitOfWork.Save();
            }
            catch (Exception ex)
            {
                // Log the exception
                return StatusCode(StatusCodes.Status500InternalServerError, "Failed to save the theatre. Please try again later.");
            }

            // Return 200 OK status code along with the created object
            return Ok(obj);
        }


        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpDelete("{id:int}", Name = "Delete")]
        public IActionResult Delete(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            var theatre = _unitOfWork.TheatreRepository.Get(u => u.TheatreId == id);
            if (theatre == null)
            {
                return NotFound();
            }
            _unitOfWork.TheatreRepository.Remove(theatre);
            _unitOfWork.Save();

            return NoContent();
        }


        [HttpPut("{id:int}", Name = "Update")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult Update(int id, TheatreViewModel theatreViewModel)
        {
            try
            {
                if (theatreViewModel == null || id != theatreViewModel.TheatreId)
                {
                    return BadRequest();
                }


                Theatre theatre = new Theatre
                {
                    TheatreId = theatreViewModel.TheatreId,
                    TheatreName = theatreViewModel.TheatreName,
                    Address = theatreViewModel.Address,
                };

                var existingtheatre = _unitOfWork.TheatreRepository.Get(u => u.TheatreId == theatreViewModel.TheatreId);

                existingtheatre.TheatreName = theatreViewModel.TheatreName;
                existingtheatre.Address = theatreViewModel.Address;

                _unitOfWork.TheatreRepository.Update(theatre);
                _unitOfWork.Save();

                return NoContent();
            }
            catch (Exception ex)
            {
                // Log the exception
                Console.WriteLine($"An error occurred while updating theatre with ID {id}: {ex}");

                // Optionally, rethrow the exception to propagate it further
                // throw;

                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }




        [HttpPatch("{id:int}", Name = "UpdatePartial")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]

        public IActionResult UpdatePartial(int id, JsonPatchDocument<TheatreViewModel> patchtheatreviewmodel)
        {
            if(patchtheatreviewmodel==null || id== 0)
            {
                return BadRequest();
            }
            var existingtheatre = _unitOfWork.TheatreRepository.Get(u => u.TheatreId == id);
            if(existingtheatre == null)
            {
                return NotFound();  
            }
            TheatreViewModel obj = new TheatreViewModel
            {
                TheatreId = existingtheatre.TheatreId,
                TheatreName = existingtheatre.TheatreName,
                Address = existingtheatre.Address
            };
            patchtheatreviewmodel.ApplyTo(obj, ModelState);


            Theatre theater = new Theatre
            {
                TheatreId = obj.TheatreId,
                TheatreName = obj.TheatreName
           
            };

            _unitOfWork.TheatreRepository.Update(theater);
            _unitOfWork.Save();
            if(!ModelState.IsValid)
            {
                return BadRequest();    
            }
            return NoContent();

        }

    // Movies Api


        [HttpGet("MovieList")]
        public IActionResult MovieList()
        {
            var users = _unitOfWork.MovieRepository.GetAll().ToList();

            var data = users.Select(u => new MovieViewModel
            {
                MovieId = u.MovieId,
                MovieName = u.MovieName,
                Genre = u.Genre,
                Time = u.Time,
            });

            return Ok(data);
        }

        [HttpGet("GetMovieById/{id:int}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public IActionResult GetMovie(int id)
        {
            if (id <= 0)
            {
                return BadRequest("Invalid ID provided");
            }

            var movie = _unitOfWork.MovieRepository.Get(u => u.MovieId == id);

            if (movie == null)
            {
                return NotFound("Movie not found");
            }

            return Ok(movie);
        }



        [HttpPost("MovieAdd")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public ActionResult<MovieViewModel> Add([FromBody] MovieViewModel movieViewModel)
        {
                if (movieViewModel == null)
            {
                return BadRequest("Invalid request data");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (movieViewModel.MovieId > 0)
            {
                return BadRequest("MovieId should not be provided, it will be generated by the system.");
            }

            var obj = new Movie
            {
                MovieName = movieViewModel.MovieName,
                Genre = movieViewModel.Genre,
                Time = movieViewModel.Time,
                ImageUrl = movieViewModel.ImageUrl,
            };

            try
            {
                _unitOfWork.MovieRepository.Add(obj);
                _unitOfWork.Save();
            }
            catch (Exception ex)
            {
                // Log the exception
                return StatusCode(StatusCodes.Status500InternalServerError, "Failed to save the movie. Please try again later.");
            }

            // Returning Ok with the created object
            return Ok(obj);
        }


        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpDelete("DeleteMovie/{id:int}")]
        public IActionResult DeleteMovie(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            var movie = _unitOfWork.MovieRepository.Get(u => u.MovieId == id);
            if (movie == null)
            {
                return NotFound();
            }
            _unitOfWork.MovieRepository.Remove(movie);
            _unitOfWork.Save();

            return NoContent();
        }


        [HttpPut("UpdateMovie/{id:int}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult UpdateMovie(int id, MovieViewModel movieViewModel)
        {
            try
            {
                if (movieViewModel == null || id != movieViewModel.MovieId)
                {
                    return BadRequest();
                }


                var existingmovie = _unitOfWork.MovieRepository.Get(u=> u.MovieId == movieViewModel.MovieId);

                existingmovie.MovieName = movieViewModel.MovieName;
                existingmovie.Genre = movieViewModel.Genre;
                existingmovie.Time = movieViewModel.Time;
                existingmovie.ImageUrl = movieViewModel.ImageUrl;

                _unitOfWork.MovieRepository.Update(existingmovie);
                _unitOfWork.Save();

                return NoContent();
            }
            catch (Exception ex)
            {
                // Log the exception
                Console.WriteLine($"An error occurred while updating theatre with ID {id}: {ex}");

                // Optionally, rethrow the exception to propagate it further
                // throw;

                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }

        // screen Api

        [HttpGet("ScreenList")]
        public IActionResult ScreenList()
        {
            var users = _unitOfWork.ScreenRepository.GetAll(includeProperties:"Movie,Theatre").ToList();

            var data = users.Select(u => new ScreenViewModel
            {
                Id = u.Id,
                ScreenId = u.ScreenId,
                MovieId = u.MovieId,
                Movie = u.Movie,
                Theatre = u.Theatre,
                TheatreId = u.TheatreId,
                TotalSeats = u.TotalSeats,
                ShowTime = new List<DateTime> { u.Showtime }

            });

            return Ok(data);
        }





        [HttpGet("GetScreen/{id:int}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public IActionResult GetScreen(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            var screen = _unitOfWork.ScreenRepository.Get(u => u.Id == id);
            if (screen == null)
            {
                return NotFound();
            }
            return Ok(screen);
        }

        [HttpPost("ScreenAdd")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult Add([FromBody] ScreenViewModel screenViewModel)
        {
            if (screenViewModel == null)
            {
                return BadRequest("Invalid request data");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var showtime = screenViewModel.ShowTime.FirstOrDefault();

            var obj = new Screen
            {
                ScreenId = screenViewModel.ScreenId,
                MovieId = screenViewModel.MovieId,
                TheatreId = screenViewModel.TheatreId,
                TotalSeats = screenViewModel.TotalSeats,
                RemainingSeats = screenViewModel.TotalSeats,
                Showtime = showtime
            };

            try
            {
                _unitOfWork.ScreenRepository.Add(obj);
                _unitOfWork.Save();
            }
            catch (Exception ex)
            {
                // Log the exception
                return StatusCode(StatusCodes.Status500InternalServerError, "Failed to save the screen. Please try again later.");
            }

            // Return 200 OK status code along with the processed data
            return Ok(obj);
        }


        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpDelete("DeleteScreen/{id:int}")]
        public IActionResult DeleteScreen(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            var screen = _unitOfWork.ScreenRepository.Get(u => u.ScreenId == id);
            if (screen == null)
            {
                return NotFound();
            }
            _unitOfWork.ScreenRepository.Remove(screen);
            _unitOfWork.Save();

            return NoContent();
        }


        [HttpPut("UpdateScreen/{id:int}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult UpdateScreen(int id, ScreenViewModel screenViewModel)
        {
            try
            {
                if (screenViewModel == null || id != screenViewModel.ScreenId)
                {
                    return BadRequest();
                }

                var existingscreen = _unitOfWork.ScreenRepository.Get(u => u.Id == screenViewModel.Id);

                existingscreen.ScreenId = screenViewModel.ScreenId;
                existingscreen.MovieId = screenViewModel.MovieId;
                existingscreen.TheatreId = screenViewModel.TheatreId;
                existingscreen.TotalSeats = screenViewModel.TotalSeats;
                existingscreen.Showtime = screenViewModel.ShowTime.FirstOrDefault();




                _unitOfWork.ScreenRepository.Update(existingscreen);
                _unitOfWork.Save();

                return NoContent();
            }
            catch (Exception ex)
            {
                // Log the exception
                Console.WriteLine($"An error occurred while updating theatre with ID {id}: {ex}");

                // Optionally, rethrow the exception to propagate it further
                // throw;

                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }



    }
}
